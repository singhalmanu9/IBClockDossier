package essentials;import java.awt.Button;import java.awt.Frame;import java.awt.Label;import java.awt.PopupMenu;import java.util.ArrayList;import clocks.Clock;import sides.Side;import BreezyGUI.*;/** * The GUI class contains the code for to display the * GUI, or Graphical User Interface. The class uses the * ClockSolver runner to obtain information on the clock. *  * @author Abhimanyu S. * @see ClockSolver */public class GUI extends GBFrame {	//The runner: this holds all the data needed to run the program	// e.g. the clock, all the clock values, the buttons, etc.	private ClockSolver runner;	   	//The labels: these display the text strings that guide the user.   	private Label firstLabel; 	private Label secondLabel;   	   	//The integer fields: these are used for the input and output of    	//integer values.  	private IntegerField first;    	private IntegerField second;    	private IntegerField third;   	private IntegerField fourth;    	private IntegerField fifth;    	private IntegerField sixth;    	private IntegerField seventh;    	private IntegerField eighth;    	private IntegerField ninth;    	private IntegerField tenth;    	private IntegerField eleventh;    	private IntegerField twelfth;    	private IntegerField thirteenth;    	private IntegerField fourteenth;    	private IntegerField fifteenth;    	private IntegerField sixteenth;    	private IntegerField seventeenth;    	private IntegerField eighteenth;    	//The command buttons: these trigger the buttonClicked method when   	//clicked.   	private Button solveButton;   	private Button clearButton;   	private Button helpButton;      	public GUI(ClockSolver clock) // constructor   	{   		// gets the runner   		runner = clock;   		   		// puts the labels on the GUI   		firstLabel = addLabel("Front Side",1,2,1,1);   		secondLabel = addLabel("Back Side",1,6,1,1);   		   		// put all the fields in the GUI   		first = addIntegerField(12,2,1,1,1);   		second = addIntegerField(12,2,2,1,1);   		third = addIntegerField(12,2,3,1,1);   		fourth = addIntegerField(12,3,1,1,1);   		fifth = addIntegerField(12,3,2,1,1);   		sixth = addIntegerField(12,3,3,1,1);   		seventh = addIntegerField(12,4,1,1,1);   		eighth = addIntegerField(12,4,2,1,1);   		ninth = addIntegerField(12,4,3,1,1);   		   		tenth = addIntegerField(12,2,5,1,1);   		eleventh = addIntegerField(12,2,6,1,1);   		twelfth = addIntegerField(12,2,7,1,1);   		thirteenth = addIntegerField(12,3,5,1,1);   		fourteenth = addIntegerField(12,3,6,1,1);   		fifteenth = addIntegerField(12,3,7,1,1);   		sixteenth = addIntegerField(12,4,5,1,1);   		seventeenth = addIntegerField(12,4,6,1,1);   		eighteenth = addIntegerField(12,4,7,1,1);    		   		// add the buttons to the GUI   		solveButton = addButton("SOLVE",1,4,1,1);   		clearButton = addButton("RESET",4,4,1,1);   		helpButton = addButton("HELP!!!",5,4,1,1);   	}   	/**   	 * This method checks what button was pressed   	 * and does a corresponding action   	 * @param buttonObj - the button that was pressed   	 */   	public void buttonClicked (Button buttonObj)   	{	    // if the clear button was pressed	    if(buttonObj == clearButton)	    {	    	// set all the fields to 0	    	first.setNumber(12);	    	second.setNumber(12);	    	third.setNumber(12);	    	fourth.setNumber(12);	    	fifth.setNumber(12);	    	sixth.setNumber(12);	    	seventh.setNumber(12);	    	eighth.setNumber(12);	    	ninth.setNumber(12);	    		    	tenth.setNumber(12);	    	eleventh.setNumber(12);	    	twelfth.setNumber(12);	    	thirteenth.setNumber(12);	    	fourteenth.setNumber(12);	    	fifteenth.setNumber(12);	    	sixteenth.setNumber(12);	    	seventeenth.setNumber(12);	    	eighteenth.setNumber(12);	    }	    // if the solve button is pressed	    else if (buttonObj == solveButton)	    {	    	// get the values in each of the fields		    int clock1 = first.getNumber();		    int clock2 = second.getNumber();		    int clock3 = third.getNumber();		    int clock4 = fourth.getNumber();		    int clock5 = fifth.getNumber();		    int clock6 = sixth.getNumber();		    int clock7 = seventh.getNumber();		    int clock8 = eighth.getNumber();		    int clock9 = ninth.getNumber();		    		    int clock10 = tenth.getNumber();		    int clock11 = eleventh.getNumber();		    int clock12 = twelfth.getNumber();		    int clock13 = thirteenth.getNumber();		    int clock14 = fourteenth.getNumber();		    int clock15 = fifteenth.getNumber();		    int clock16 = sixteenth.getNumber();		    int clock17 = seventeenth.getNumber();		    int clock18 = eighteenth.getNumber();	    			    // puts the numbers in the fields into the corresponding clocks		    runner.clock.twoSides[0].clocks[0].pointsTo = clock1;		    runner.clock.twoSides[0].clocks[1].pointsTo = clock2;		    runner.clock.twoSides[0].clocks[2].pointsTo = clock3;		    runner.clock.twoSides[0].clocks[3].pointsTo = clock4;		    runner.clock.twoSides[0].clocks[4].pointsTo = clock5;		    runner.clock.twoSides[0].clocks[5].pointsTo = clock6;		    runner.clock.twoSides[0].clocks[6].pointsTo = clock7;		    runner.clock.twoSides[0].clocks[7].pointsTo = clock8;		    runner.clock.twoSides[0].clocks[8].pointsTo = clock9;		    		    runner.clock.twoSides[1].clocks[0].pointsTo = clock10;		    runner.clock.twoSides[1].clocks[1].pointsTo = clock11;		    runner.clock.twoSides[1].clocks[2].pointsTo = clock12;		    runner.clock.twoSides[1].clocks[3].pointsTo = clock13;		    runner.clock.twoSides[1].clocks[4].pointsTo = clock14;		    runner.clock.twoSides[1].clocks[5].pointsTo = clock15;		    runner.clock.twoSides[1].clocks[6].pointsTo = clock16;		    runner.clock.twoSides[1].clocks[7].pointsTo = clock17;		    runner.clock.twoSides[1].clocks[8].pointsTo = clock18;		    		    for(Side s : runner.clock.twoSides)		    {		    	for(Clock c : s.clocks)		    	{		    		if(c.pointsTo < 1 || c.pointsTo > 12)		    		{		    			// throws an exception of the number is less than 1 or greater than 12		    			this.messageBox("Illegal inputs were added. \nPlease reinput numbers from 1 to 12 \nin all fields.");		    		}		    	}		    }		    	    	runner.writeToFile("clockData.txt"); // writes instructions into the file	    }	    	    else if(buttonObj == helpButton) // displays the following help message	    {	    	this.messageBox("Welcome to the Rubik's Clock Solver \nDossier, developed by Abhimanyu Singhal!" 	    			+ "\nIn order to use this application to it's \nfullest, please input the value shown on \nyour "	    			+ "clock in the spaces provided. \nPlease take care to input the correct \nvalue in the correct place."	    			+ "\nThanks for using the Rubik's Clock \nSolver! Please click OK to return to the \ninput window.");	    }    }   	   	public static void main(String[] args) // main method   	{   		// Create the clock, logic, and the runner   		// all will be used in constructing the GUI   		TheClock clock = new TheClock();   		Logic log = new Logic(clock);   		ClockSolver runner = new ClockSolver(clock, log);   		   		// finally create the actual GUI to run the whole program   		Frame calc = new GUI(runner);   		calc.setSize(600, 450);   		calc.setVisible(true);   	} }